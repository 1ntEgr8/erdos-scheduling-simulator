// ERDOS Scheduler RPC Service.
// This service is aimed for systems to schedule tasks by exploiting the
// scheduler backends and the Simulator types available in ERDOS.

syntax = "proto3";

package org.erdos.scheduler;

// The `SchedulerService` is the main service for scheduling tasks.
service SchedulerService {
    // Registers a new framework with the backend scheduler.
    // This is the entry point for a new instance of Spark / Flink to register
    // itself with the backend scheduler, and is intended as an EHLO.
    rpc RegisterFramework(RegisterFrameworkRequest) returns (RegisterFrameworkResponse) {}

    /// Deregisters the framework with the backend scheduler.
    /// This is meant for the framework to signal its intent to shut down.
    rpc DeregisterFramework(DeregisterFrameworkRequest) returns (DeregisterFrameworkResponse) {}

    /// Registers a new Worker with the backend scheduler.
    /// This is invoked whenever a new Worker joins the framework.
    rpc RegisterWorker(RegisterWorkerRequest) returns (RegisterWorkerResponse) {}
}


/// Framework related RPC structures.
/// The following structures represent the data that the framework as a whole
/// must pass to the scheduling backend. This may involve things like the URI,
/// the initialization time, and other general static information.
message RegisterFrameworkRequest {
    string name = 1;
    string uri = 2;
    uint64 timestamp = 3;
}

message RegisterFrameworkResponse {
    bool success = 1;
    string message = 2;
}

message DeregisterFrameworkRequest {
    string name = 1;
    string uri = 2;
    uint64 timestamp = 3;
}

message DeregisterFrameworkResponse {
    bool success = 1;
    string message = 2;
}

/// Worker related RPC structures.
/// The following structures represent the data that a Worker's addition to the
/// framework must pass to the scheduling backend. This may involve things like
/// the name of the Worker, the URI, the number of resources available to the
/// Worker, and other general static information.
message RegisterWorkerRequest {
    string name = 1;
    string id = 2;
    int32 cores = 3;
    int32 memory = 4;
}

message RegisterWorkerResponse {
    bool success = 1;
    string message = 2;
}
